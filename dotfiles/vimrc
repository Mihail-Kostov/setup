" Vim configuration file
"
" Some good .vimrc
" - http://amix.dk/vim/vimrc.html
" - https://github.com/madx/propane/blob/master/vim/vimrc
" - https://github.com/necolas/dotfiles/blob/master/vim/vimrc

set nocompatible " be iMproved (you want vim, not just vi)

" ---

" Plugins

" use vim-plug to handle plugins

call plug#begin('~/.vim/plugged')

" generic config that everyone (should) use
Plug 'tpope/vim-sensible'

" file tree
Plug 'scrooloose/nerdtree'

" .editorconfig file support (see editorconfig.org)
Plug 'editorconfig/editorconfig-vim'

" sublime text like ctrl+p (open file with fuzzy matching)
Plug 'kien/ctrlp.vim'

" multiple cursor, select some text then ctrl+n)
Plug 'terryma/vim-multiple-cursors'

" indentation guides
Plug 'nathanaelkane/vim-indent-guides'

" syntax error/linter
Plug 'scrooloose/syntastic'

" code indexer, pretty cool to jump to classes/vars/function from the name  http://andrew.stwrt.ca/posts/vim-ctags
Plug 'xolox/vim-easytags'
"requirement for vim-easytags
Plug 'xolox/vim-misc'

" Open url with <Leader>u or :OpenURL " no need, just use 'gx' to open the url under the cursor
"Plug 'henrik/vim-open-url'

" handle surrounding stuff
Plug 'tpope/vim-surround'

" Search in project with ag
Plug 'rking/ag.vim'

" Vim session
Plug 'tpope/vim-obsession'

" play with comments
Plug 'tomtom/tcomment_vim'

" Git integration
Plug 'tpope/vim-fugitive'

" Zoom into window
Plug 'regedarek/ZoomWin'

" More Syntax

Plug 'nono/vim-handlebars'
Plug 'othree/html5-syntax.vim'
Plug 'pangloss/vim-javascript'
Plug 'tpope/vim-markdown'

call plug#end()

"" No backup/swap files

set backupdir=
set directory=
set nowritebackup
set noswapfile

"" Display

set title

"" Line Number

set number
highlight LineNr cterm=none ctermfg=DarkGrey ctermbg=none

"" Don't wrap long line

set nowrap

"" Scolling will always some lines around cursor

set scrolloff=3

"" Search

set ignorecase
set smartcase " don't ignore case when a maj is used
set hlsearch " highlight search
" Clear the search highlight by pressing ENTER when in Normal mode (Typing commands)
:nnoremap <CR> :nohlsearch<CR>/<BS><CR>

"" No beep

set visualbell
set noerrorbells

"" Shared clipboard with the OS

set clipboard=unnamed

"" Spaces/Tabs

set expandtab " Use spaces instead of tabs
set shiftwidth=2
set tabstop=2

"" Indentation guides

set ts=2 sw=2
let g:indent_guides_start_level=2
let g:indent_guides_guide_size=1

"" A buffer becomes hidden when it is abandoned

set hidden
" See buffers has tabs you find in other editors

" ---

" Remapping

"" learn vim, the right way

"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>
"imap <up> <nop>
"imap <down> <nop>
"imap <left> <nop>
"imap <right> <nop>
" this is preventing mouse scroll to affect vim


"" Easier map leader

" With a map leader it's possible to do extra key combinations
let mapleader = ","
let g:mapleader = ","

" Fast saving
nmap <leader>w :w!<cr>

"" Bye Esc => jk or kj

map jk <Esc>
map kj <Esc>
imap jk <Esc>
imap kj <Esc>

"" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

if has("mac") || has("macunix")
  nmap <D-j> <M-j>
  nmap <D-k> <M-k>
  vmap <D-j> <M-j>
  vmap <D-k> <M-k>
endif

"" really delete a line (no cut)
map <leader>d "_d

"" open an url
map <leader>u gx

"" navigate between buffers
map <leader>b :bnext<cr>

"" OS X need this to share copy/paste between os/vim clipboard

" `ctrl+c/ctrl+v to share clipboard with OSX
vmap <C-c> y:call system("pbcopy", getreg("\""))<CR>
nmap <C-v> :call setreg("\"",system("pbpaste"))<CR>p

" ---

" Visual stuff

set background=dark

"" highlight some specials chars

set listchars=eol:¬,tab:→→,extends:>,precedes:<
set list

"" highlight leading spaces

set conceallevel=2 concealcursor=nv
autocmd Syntax * syn match LeadingWhiteSpace /\(^\s*\)\@<=\s/ conceal cchar=·
  " example

"" adjust highlight color for conceal/special chars

highlight Conceal cterm=none ctermfg=DarkGrey ctermbg=none " leading whitespace
highlight SpecialKey cterm=none ctermfg=DarkGrey ctermbg=none " tab
highlight NonText cterm=none ctermfg=DarkGrey ctermbg=none " eol

" ---

" Plugins config

"" CtrlP

nmap <Leader>oo :CtrlP<cr>
nmap <Leader>of :CtrlPMixed<cr>
nmap <Leader>ob :CtrlPBuffer<cr>
nmap <Leader>or :CtrlPMRU<cr>

"" ctags + CtrlP

nnoremap <leader>. :CtrlPTag<cr>

"" Syntastic

let g:syntastic_enable_signs = 1
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_check_on_open = 1
